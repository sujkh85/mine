{"version":3,"sources":["component/bomb.png","component/boom.mp3","component/victory.m4a","component/click.mp3","component/IconexConnect.js","component/SDK.js","component/Const.js","component/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","IconexConnect","getAddress","Promise","resolve","window","addEventListener","eventHandler","event","_event$detail","detail","type","payload","removeEventListener","dispatchEvent","CustomEvent","sendTransaction","params","_event$detail2","result","provider","HttpProvider","iconService","IconService","CallBuilder","IconBuilder","CallTransactionBuilder","IcxTransactionBuilder","SDK","callBuild","_ref","arguments","length","undefined","from","method","to","_ref$params","build","sendTxBuild","_ref3","_ref3$params","_ref3$networkId","networkId","_ref3$stepLimit","stepLimit","_ref3$value","value","jsonrpc","nid","timestamp","concat","Date","getTime","toString","version","id","sendTxBuild2","_ref2","_ref2$networkId","_ref2$stepLimit","_ref2$value","Const","contractAddress","Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","config","row","column","mineCount","getTxBuild","_ref$networkId","_ref$stepLimit","_ref$value","initState","mineList","initMakeMineList","mineObj","arrToObject","mainDataList","initMainDataList","updatedMineMainData","updatedPositionMainData","gameState","victoryCount","forEach","item","position","getPosition","index","x","y","num","getWay8List","maxX","maxY","target","isMine","parseInt","list","push","filter","max","arr","r","Math","floor","random","indexOf","sort","a","b","_ref4","count","i","j","initMakeCellData","_ref5","_ref5$mineCount","isHide","setMine","checkVictory","state","isVictory","victoryRef","current","play","setState","onClickItem","e","_this$state","currentTarget","getAttribute","console","log","boomRef","clickPlay","emptyOpen","clickRef","cellText","react_default","createElement","src","bombImg","alt","style","width","height","color","1","2","3","4","5","6","7","8","fontWeight","retry","save","getUserAddress","registSave","_ref6","asyncToGenerator","regenerator_default","mark","_callee","callback","address","wrap","_context","prev","next","sent","setTimeout","stop","_x","apply","_ref7","_callee2","txObj","tx","_context2","open","getVictory","_x2","_ref8","_callee3","_context3","IconSDK","execute","IconConverter","toNumber","_x3","load","React","createRef","_this2","document","querySelector","preventDefault","_this3","_this$state2","marginTop","marginBottom","className","map","rowList","key","classnames","idx","main-row-item-even","main-row-item-odd","data","onClick","boom","ref","victory","clicksound","Component","App","paddingLeft","component_Main","PureComponent","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.813fbc4f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bomb.78099a3b.png\";","module.exports = __webpack_public_path__ + \"static/media/boom.1f042630.mp3\";","module.exports = __webpack_public_path__ + \"static/media/victory.4f86f5e9.m4a\";","module.exports = __webpack_public_path__ + \"static/media/click.8026a539.mp3\";","const getAddress = () => new Promise((resolve) => {\n    const eventHandler = (event) => {\n      const { type, payload } = event.detail;\n      if (type === 'RESPONSE_ADDRESS') {\n        resolve(payload);\n      }\n      window.removeEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    };\n    window.addEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    window.dispatchEvent(new CustomEvent('ICONEX_RELAY_REQUEST', {\n      detail: {\n        type: 'REQUEST_ADDRESS',\n      },\n    }));\n  });\n  \n  \n  const sendTransaction = params => new Promise((resolve) => {\n    const eventHandler = (event) => {\n      const { type, payload } = event.detail;\n      if (type === 'RESPONSE_JSON-RPC') {\n        resolve(payload.result);\n      }\n      window.removeEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    };\n    window.addEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    window.dispatchEvent(new CustomEvent('ICONEX_RELAY_REQUEST', {\n      detail: {\n        type: 'REQUEST_JSON-RPC',\n        payload: params,\n      },\n    }));\n  });\n  \n  export default {\n    getAddress,\n    sendTransaction,\n  };","import IconService, { HttpProvider, IconBuilder } from \"icon-sdk-js\";\n\nconst provider = new HttpProvider(\"https://wallet.icon.foundation/api/v3\");\n\nconst iconService = new IconService(provider);\n\nconst {\n  CallBuilder,\n  CallTransactionBuilder,\n  IcxTransactionBuilder\n} = IconBuilder;\n\nconst callBuild = ({ from, method, to, params = {} } = {}) => {\n  const callBuilder = new CallBuilder();\n  const obj = callBuilder\n    .from(from)\n    .to(to)\n    .method(method)\n    .params(params)\n    .build();\n  return obj;\n};\n\nconst sendTxBuild2 = ({\n  from,\n  to,\n  networkId = \"0x3\",\n  stepLimit = \"0x493e0\",\n  value = \"0x0\"\n} = {}) => {\n  const TransactionBuilder = new IcxTransactionBuilder();\n  const obj = TransactionBuilder.nid(networkId)\n    .from(from)\n    .to(to)\n    .stepLimit(stepLimit)\n    .value(value)\n    .timestamp(`0x${(new Date().getTime() * 1000).toString(16)}`)\n    .version(\"0x3\")\n    .build();\n\n  return {\n    jsonrpc: \"2.0\",\n    method: \"icx_sendTransaction\",\n    params: obj,\n    id: 1\n  };\n};\n\nconst sendTxBuild = ({\n  from,\n  to,\n  method,\n  params = {},\n  networkId = \"0x3\",\n  stepLimit = \"0x493e0\",\n  value = \"0x0\"\n} = {}) => {\n  const callTransactionBuilder = new CallTransactionBuilder();\n  const obj = callTransactionBuilder\n    .nid(networkId)\n    .from(from)\n    .to(to)\n    .stepLimit(stepLimit)\n    .value(value)\n    .timestamp(`0x${(new Date().getTime() * 1000).toString(16)}`)\n    .method(method)\n    .params(params)\n    .version(\"0x3\")\n    .build();\n\n  return {\n    jsonrpc: \"2.0\",\n    method: \"icx_sendTransaction\",\n    params: obj,\n    id: 1\n  };\n};\n\nexport default {\n  iconService,\n  callBuild,\n  sendTxBuild,\n  sendTxBuild2\n};\n","export default {\n  contractAddress: \"cx7f80ee8c33982f38a5722b4c371ce8a323c45eb9\"\n};\n","import React, { Component } from \"react\";\nimport classnames from \"classnames\";\nimport \"../css/Main.scss\";\nimport boom from \"./boom.mp3\";\nimport victory from \"./victory.m4a\";\nimport clicksound from \"./click.mp3\";\nimport bombImg from \"./bomb.png\";\nimport IconexConnect from \"./IconexConnect\";\nimport { IconConverter, IconBuilder } from \"icon-sdk-js\";\nimport { async } from \"q\";\nimport IconSDK from \"./SDK\";\nimport Const from \"./Const\";\n\nconst { CallTransactionBuilder } = IconBuilder;\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.initState();\n    this.boomRef = React.createRef();\n    this.victoryRef = React.createRef();\n    this.clickRef = React.createRef();\n  }\n  config = {\n    //10*10\n    row: 10,\n    column: 10,\n    mineCount: 15\n  };\n  getTxBuild = ({\n    from,\n    to,\n    method,\n    params = {},\n    networkId = \"0x3\",\n    stepLimit = \"0x13d620\",\n    value = \"0x0\"\n  } = {}) => {\n    const callTransactionBuilder = new CallTransactionBuilder();\n    const obj = callTransactionBuilder\n      .nid(networkId)\n      .from(from)\n      .to(to)\n      .stepLimit(stepLimit)\n      .value(value)\n      .timestamp(`0x${(new Date().getTime() * 1000).toString(16)}`)\n      .method(method)\n      .params(params)\n      .version(\"0x3\")\n      .build();\n\n    return {\n      jsonrpc: \"2.0\",\n      method: \"icx_sendTransaction\",\n      params: obj,\n      id: 1\n    };\n  };\n  arrToObject(arr) {\n    let result = {};\n    arr.forEach(item => {\n      result[item] = true;\n    });\n    return result;\n  }\n  initState = () => {\n    //랜덤 숫자\n    let mineList = this.initMakeMineList(\n      this.config.row * this.config.column,\n      this.config.mineCount\n    );\n    //랜덤 숫자를 객체로 변환\n    let mineObj = this.arrToObject(mineList);\n    //데이터 구조 만들기\n    let mainDataList = this.initMainDataList({\n      mineObj: mineObj,\n      row: this.config.row,\n      column: this.config.column\n    });\n    //근처 지뢰 숫자 업데이트\n    let updatedMineMainData = this.updatedMineMainData({\n      mainDataList: mainDataList,\n      mineList: mineList,\n      row: this.config.row,\n      column: this.config.column\n    });\n    let updatedPositionMainData = this.updatedPositionMainData(\n      updatedMineMainData\n    );\n    return {\n      mineList,\n      mineObj,\n      mainDataList: updatedPositionMainData,\n      gameState: \"start\",\n      victoryCount: 0\n    };\n  };\n  updatedPositionMainData = mainDataList => {\n    mainDataList.forEach(row => {\n      row.forEach(item => {\n        let position = this.getPosition(item.index, this.config.row);\n        item.x = position.x;\n        item.y = position.y;\n      });\n    });\n    return mainDataList;\n  };\n  updatedMineMainData = ({ mainDataList, mineList, row, column }) => {\n    mineList.forEach(num => {\n      //index를 좌표로 변환\n      let position = this.getPosition(num, row);\n      //8방향 좌표 찾는 함수\n      let way8List = this.getWay8List({\n        x: position.x,\n        y: position.y,\n        maxX: column,\n        maxY: row\n      });\n      way8List.forEach(item => {\n        let target = mainDataList[item.y][item.x];\n        target.mineCount += 1;\n        if (target.isMine) {\n          target.mineCount = 0;\n        }\n      });\n    });\n    return mainDataList;\n  };\n  //인덱스로 x y 좌표를 구하는 함수\n  getPosition = (index, row) => {\n    let x = index % row;\n    let y = parseInt(index / row);\n    return {\n      x,\n      y\n    };\n  };\n  /* \n    1 2 3 \n    4 5 6 \n    7 8 9\n    5번의 좌표 1,1을 넣을경우 8방향의 좌표배열을 리턴하는 함수\n  */\n  getWay8List = ({ x, y, maxX, maxY }) => {\n    let list = [];\n    // x -1\n    list.push({ x: x - 1, y: y - 1 });\n    list.push({ x: x - 1, y: y });\n    list.push({ x: x - 1, y: y + 1 });\n    // x\n    list.push({ x: x, y: y - 1 });\n    list.push({ x: x, y: y + 1 });\n    // x + 1\n    list.push({ x: x + 1, y: y - 1 });\n    list.push({ x: x + 1, y: y });\n    list.push({ x: x + 1, y: y + 1 });\n    list = list.filter(item => {\n      if (item.x < 0) {\n        return false;\n      }\n      if (item.x >= maxX) {\n        return false;\n      }\n      if (item.y < 0) {\n        return false;\n      }\n      if (item.y >= maxY) {\n        return false;\n      }\n      return true;\n    });\n    return list;\n  };\n\n  initMakeMineList = (max = 100, mineCount = 10) => {\n    let arr = [];\n    while (arr.length < mineCount) {\n      let r = Math.floor(Math.random() * max);\n      if (arr.indexOf(r) === -1) arr.push(r);\n    }\n    arr.sort((a, b) => {\n      return a - b;\n    });\n    return arr;\n  };\n  initMainDataList = ({ mineObj, row, column }) => {\n    let list = [];\n    let count = 0;\n    for (let i = 0; i < row; i++) {\n      let row = [];\n      for (let j = 0; j < column; j++) {\n        let item = this.initMakeCellData({ index: count, mineObj: mineObj });\n        count++;\n        row.push(item);\n      }\n      list.push(row);\n    }\n    return list;\n  };\n  //지뢰인지 판단\n  isMine = (index, mineObj) => {\n    return mineObj[index];\n  };\n  //셀 데이터 구조\n  initMakeCellData = ({ index, mineObj, mineCount = 0 }) => {\n    let isMine = this.isMine(index, mineObj);\n    return {\n      index,\n      isMine: isMine ? isMine : false,\n      mineCount,\n      isHide: true,\n      setMine: false\n    };\n  };\n  checkVictory = () => {\n    const { mainDataList } = this.state;\n    let isVictory = true;\n    mainDataList.forEach(row => {\n      row.forEach(item => {\n        if (item.isHide === true) {\n          if (item.isMine && item.setMine) {\n          } else {\n            isVictory = false;\n          }\n        }\n      });\n    });\n    if (isVictory === true) {\n      this.victoryRef.current.play();\n      this.setState({\n        gameState: \"victory\"\n      });\n    }\n  };\n  onClickItem = (e, onClickItem) => {\n    let { mainDataList, gameState } = this.state;\n    let num = e.currentTarget.getAttribute(\"data\");\n    if (num === null) {\n    }\n    console.log(\"num\", num);\n    let position = this.getPosition(num, this.config.row);\n    let target = mainDataList[position.y][position.x];\n    if (gameState === \"end\" || gameState === \"victory\") {\n      return;\n    }\n\n    if (target.setMine === true) {\n      //폭탄설정 해제\n      target.setMine = false;\n    } else if (target.isMine) {\n      //폭탄터짐 모든 폭탄 오픈\n      mainDataList.forEach(row => {\n        row.forEach(item => {\n          if (item.isMine === true) {\n            item.isHide = false;\n          }\n        });\n      });\n      this.setState({\n        gameState: \"end\"\n      });\n      this.boomRef.current.play();\n    } else if (target.mineCount !== 0) {\n      //지뢰숫자오픈\n      target.isHide = false;\n      this.clickPlay();\n    } else if (target.mineCount === 0) {\n      //지뢰 카운트가 0이라서 주변 상자들오픈\n      this.clickPlay();\n      this.emptyOpen(target);\n    }\n\n    this.setState({ mainDataList }, () => {\n      this.checkVictory();\n    });\n  };\n  emptyOpen = target => {\n    target.isHide = false;\n    let { mainDataList } = this.state;\n    let arr = this.getWay8List({\n      x: target.x,\n      y: target.y,\n      maxX: this.config.column,\n      maxY: this.config.row\n    });\n    arr.forEach(position => {\n      let item = mainDataList[position.y][position.x];\n      if (\n        item.isHide === true &&\n        item.isMine === false &&\n        item.mineCount === 0\n      ) {\n        this.emptyOpen(item);\n      } else {\n        item.isHide = false;\n      }\n    });\n    this.setState({ mainDataList });\n  };\n  clickPlay = () => {\n    this.clickRef.current.play();\n  };\n  setMine = e => {\n    const { mainDataList } = this.state;\n    let num = e.target.getAttribute(\"data\");\n    let position = this.getPosition(num, this.config.row);\n    let target = mainDataList[position.y][position.x];\n    this.clickPlay();\n    if (target.isHide === true) {\n      target.setMine = !target.setMine;\n      this.setState({ mainDataList: mainDataList }, () => {\n        this.checkVictory();\n      });\n    }\n  };\n  componentDidMount() {\n    let mainEl = document.querySelector(\".main-container\");\n    mainEl.addEventListener(\"contextmenu\", e => {\n      e.preventDefault();\n      this.setMine(e);\n    });\n    console.log(\"this.clickRef\", this.clickRef);\n  }\n  cellText = item => {\n    if (item.isHide === false) {\n      if (item.isMine) {\n        return (\n          <img src={bombImg} alt=\"\" style={{ width: \"100%\", height: \"100%\" }} />\n        );\n      }\n      if (item.mineCount !== 0) {\n        let color = {\n          \"1\": \"#4374D9\",\n          \"2\": \"black\",\n          \"3\": \"#FF0000\",\n          \"4\": \"#005766\",\n          \"5\": \"#005766\",\n          \"6\": \"#005766\",\n          \"7\": \"#005766\",\n          \"8\": \"#005766\"\n        };\n        return (\n          <span style={{ color: color[item.mineCount], fontWeight: \"bold\" }}>\n            {item.mineCount}\n          </span>\n        );\n      } else {\n        return \"\";\n      }\n    } else {\n      if (item.setMine === true) {\n        return (\n          <img src={bombImg} alt=\"\" style={{ width: \"100%\", height: \"100%\" }} />\n        );\n      }\n      return \"\";\n    }\n  };\n  retry = () => {\n    const { victoryCount } = this.state;\n    let state = this.initState();\n    state.victoryCount = victoryCount;\n    this.setState(state);\n  };\n\n  save = () => {\n    this.getUserAddress(this.registSave);\n  };\n\n  getUserAddress = async callback => {\n    let address = await IconexConnect.getAddress();\n    if (callback) {\n      setTimeout(() => {\n        callback(address);\n      }, 1000);\n    }\n  };\n\n  registSave = async address => {\n    console.log(\"address\", address);\n    //블록체인에 기록\n    const txObj = this.getTxBuild({\n      method: \"setCount\",\n      params: {},\n      from: address,\n      to: Const.contractAddress\n    });\n\n    console.log(\"txObj\", txObj);\n    // from: address,\n    const tx = await IconexConnect.sendTransaction(txObj);\n    console.log(\"tx\", tx);\n    window.open(`https://tracker.icon.foundation/transaction/${tx}`);\n    setTimeout(() => {\n      this.getVictory(address);\n    }, 3000);\n  };\n\n  getVictory = async address => {\n    const result = await IconSDK.iconService\n      .call(\n        IconSDK.callBuild({\n          method: \"getCount\",\n          params: {},\n          to: Const.contractAddress,\n          from: address\n        })\n      )\n      .execute();\n    console.log(\"result\", result);\n    this.setState({\n      victoryCount: IconConverter.toNumber(result)\n    });\n  };\n  load = () => {\n    //몇승했는지 블러오기\n    this.getUserAddress(this.getVictory);\n  };\n  render() {\n    const { mainDataList, gameState, victoryCount } = this.state;\n    return (\n      <div>\n        <div style={{ marginTop: 10, marginBottom: 20 }}>\n          승리수 : {victoryCount}\n        </div>\n        <div className=\"main-container\">\n          {mainDataList.map((rowList, index) => {\n            return (\n              <div key={index} className={classnames(\"main-row-container\")}>\n                {rowList.map((item, idx) => {\n                  let num = index + idx;\n                  return (\n                    <div\n                      key={idx}\n                      className={classnames(\n                        \"main-row-item\",\n                        item.isHide ? \"hide\" : \"open\",\n                        {\n                          \"main-row-item-even\": num % 2 === 0,\n                          \"main-row-item-odd\": num % 2 === 1\n                        }\n                      )}\n                      data={item.index}\n                      onClick={e => {\n                        this.onClickItem(e, item);\n                      }}\n                    >\n                      {this.cellText(item)}\n                    </div>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"button-container\">\n          {gameState === \"victory\" && (\n            <button onClick={this.save}>블록체인에 기록하기</button>\n          )}\n\n          <button onClick={this.retry}>다시하기</button>\n\n          {gameState !== \"victory\" && (\n            <button onClick={this.load}>블러오기</button>\n          )}\n        </div>\n        <video src={boom} ref={this.boomRef} />\n        <video src={victory} ref={this.victoryRef} />\n        <video src={clicksound} ref={this.clickRef} />\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './component/Main'\n\nclass App extends React.PureComponent{\n  render(){\n    return(\n      <div className=\"main-page-wrapper\">\n        <div className=\"page-container_header\">\n          지뢰찾기    \n        </div>\n        <div style={{paddingLeft:30,color:'#507e26'}}>승리시 블록체인에 기록할수있습니다.</div>\n        <div style={{paddingLeft:30, color:'#507e26'}}>불러오기로 몇승했는지 로드할수있습니다.</div>\n        <div className=\"main-page-container\">\n          <div className=\"page-container_content\">\n            <Main />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}